# Multi-stage production Dockerfile for TestGenius
# Optimized for security, performance, and size

# Stage 1: Build frontend
FROM node:18-alpine AS frontend-builder

# Install security updates
RUN apk update && apk upgrade && apk add --no-cache dumb-init

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with clean npm cache
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Build frontend
RUN npm run build

# Stage 2: Production runtime
FROM node:18-alpine AS production

# Install security updates and required packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    ca-certificates && \
    rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S testgenius -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production && \
    npm cache clean --force && \
    chown -R testgenius:nodejs /app

# Copy built frontend from previous stage
COPY --from=frontend-builder --chown=testgenius:nodejs /app/dist ./dist

# Copy server code
COPY --chown=testgenius:nodejs server ./server

# Create screenshots directory with proper permissions
RUN mkdir -p /app/server/screenshots && \
    chown -R testgenius:nodejs /app/server/screenshots

# Switch to non-root user
USER testgenius

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "server/index.js"]
